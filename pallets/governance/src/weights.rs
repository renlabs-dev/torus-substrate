
//! Autogenerated weights for `pallet_governance`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-01-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-de-Joao.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/torus-node
// benchmark
// pallet
// --pallet
// pallet_governance
// --chain
// dev
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/governance/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use polkadot_sdk::{
    frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}},
    *,
};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_governance`.
pub trait WeightInfo {
	fn add_curator() -> Weight;
	fn remove_curator() -> Weight;
	fn add_allocator() -> Weight;
	fn remove_allocator() -> Weight;
	fn add_to_whitelist() -> Weight;
	fn remove_from_whitelist() -> Weight;
	fn submit_application() -> Weight;
	fn accept_application() -> Weight;
	fn deny_application() -> Weight;
	fn penalize_agent() -> Weight;
	fn add_global_params_proposal() -> Weight;
	fn add_global_custom_proposal() -> Weight;
	fn add_dao_treasury_transfer_proposal() -> Weight;
	fn vote_proposal() -> Weight;
	fn remove_vote_proposal() -> Weight;
	fn enable_vote_delegation() -> Weight;
	fn disable_vote_delegation() -> Weight;
	fn add_emission_proposal() -> Weight;
	fn set_root_curator() -> Weight;
	fn remove_root_curator() -> Weight;
}

/// Weights for `pallet_governance` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Governance::Curators` (r:1 w:1)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn add_curator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3497`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 3497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:1)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn remove_curator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `60`
		//  Estimated: `3497`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 3497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Allocators` (r:1 w:1)
	/// Proof: `Governance::Allocators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn add_allocator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3497`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 3497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Allocators` (r:1 w:1)
	/// Proof: `Governance::Allocators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn remove_allocator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `62`
		//  Estimated: `3497`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 3497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:0)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Whitelist` (r:1 w:1)
	/// Proof: `Governance::Whitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::AgentApplications` (r:1 w:0)
	/// Proof: `Governance::AgentApplications` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	fn add_to_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66`
		//  Estimated: `3822`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 3822)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:0)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Whitelist` (r:1 w:1)
	/// Proof: `Governance::Whitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::AgentApplications` (r:1 w:0)
	/// Proof: `Governance::AgentApplications` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Agents` (r:1 w:0)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(849), added: 3324, mode: `MaxEncodedLen`)
	fn remove_from_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `130`
		//  Estimated: `4314`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_000_000, 4314)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Whitelist` (r:1 w:0)
	/// Proof: `Governance::Whitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::AgentApplications` (r:1 w:1)
	/// Proof: `Governance::AgentApplications` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `Governance::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `Governance::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(73), added: 568, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn submit_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3822`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(46_000_000, 3822)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:0)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::AgentApplications` (r:1 w:1)
	/// Proof: `Governance::AgentApplications` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Whitelist` (r:0 w:1)
	/// Proof: `Governance::Whitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn accept_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `241`
		//  Estimated: `3822`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(48_000_000, 3822)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:0)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::AgentApplications` (r:1 w:1)
	/// Proof: `Governance::AgentApplications` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	fn deny_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `189`
		//  Estimated: `3822`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3822)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:0)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Agents` (r:1 w:1)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(849), added: 3324, mode: `MaxEncodedLen`)
	fn penalize_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `4314`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 4314)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `Governance::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(73), added: 568, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_global_params_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3593`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(40_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `Governance::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(73), added: 568, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_global_custom_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3593`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `Governance::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(73), added: 568, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_dao_treasury_transfer_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3593`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakedBy` (r:1 w:0)
	/// Proof: `Torus0::StakedBy` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakingTo` (r:2 w:0)
	/// Proof: `Torus0::StakingTo` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Governance::NotDelegatingVotingPower` (r:1 w:0)
	/// Proof: `Governance::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn vote_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `6100`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_000_000, 6100)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn remove_vote_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `216`
		//  Estimated: `3464`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 3464)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::NotDelegatingVotingPower` (r:1 w:1)
	/// Proof: `Governance::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn enable_vote_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1484`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_000_000, 1484)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::NotDelegatingVotingPower` (r:1 w:1)
	/// Proof: `Governance::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn disable_vote_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1484`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1484)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `Governance::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(73), added: 568, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_emission_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3593`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(38_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::RootCurator` (r:0 w:1)
	/// Proof: `Governance::RootCurator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_root_curator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::RootCurator` (r:0 w:1)
	/// Proof: `Governance::RootCurator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn remove_root_curator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Governance::Curators` (r:1 w:1)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn add_curator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3497`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 3497)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:1)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn remove_curator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `60`
		//  Estimated: `3497`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 3497)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Allocators` (r:1 w:1)
	/// Proof: `Governance::Allocators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn add_allocator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3497`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 3497)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Allocators` (r:1 w:1)
	/// Proof: `Governance::Allocators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn remove_allocator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `62`
		//  Estimated: `3497`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 3497)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:0)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Whitelist` (r:1 w:1)
	/// Proof: `Governance::Whitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::AgentApplications` (r:1 w:0)
	/// Proof: `Governance::AgentApplications` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	fn add_to_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66`
		//  Estimated: `3822`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 3822)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:0)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Whitelist` (r:1 w:1)
	/// Proof: `Governance::Whitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::AgentApplications` (r:1 w:0)
	/// Proof: `Governance::AgentApplications` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Agents` (r:1 w:0)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(849), added: 3324, mode: `MaxEncodedLen`)
	fn remove_from_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `130`
		//  Estimated: `4314`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_000_000, 4314)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Whitelist` (r:1 w:0)
	/// Proof: `Governance::Whitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::AgentApplications` (r:1 w:1)
	/// Proof: `Governance::AgentApplications` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `Governance::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `Governance::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(73), added: 568, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn submit_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3822`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(46_000_000, 3822)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:0)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::AgentApplications` (r:1 w:1)
	/// Proof: `Governance::AgentApplications` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Whitelist` (r:0 w:1)
	/// Proof: `Governance::Whitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn accept_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `241`
		//  Estimated: `3822`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(48_000_000, 3822)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:0)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Governance::AgentApplications` (r:1 w:1)
	/// Proof: `Governance::AgentApplications` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	fn deny_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `189`
		//  Estimated: `3822`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3822)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Curators` (r:1 w:0)
	/// Proof: `Governance::Curators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Agents` (r:1 w:1)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(849), added: 3324, mode: `MaxEncodedLen`)
	fn penalize_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `4314`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 4314)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `Governance::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(73), added: 568, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_global_params_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3593`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(40_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `Governance::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(73), added: 568, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_global_custom_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3593`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `Governance::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(73), added: 568, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_dao_treasury_transfer_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3593`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakedBy` (r:1 w:0)
	/// Proof: `Torus0::StakedBy` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakingTo` (r:2 w:0)
	/// Proof: `Torus0::StakingTo` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Governance::NotDelegatingVotingPower` (r:1 w:0)
	/// Proof: `Governance::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn vote_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `6100`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_000_000, 6100)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn remove_vote_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `216`
		//  Estimated: `3464`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 3464)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::NotDelegatingVotingPower` (r:1 w:1)
	/// Proof: `Governance::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn enable_vote_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1484`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_000_000, 1484)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::NotDelegatingVotingPower` (r:1 w:1)
	/// Proof: `Governance::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn disable_vote_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1484`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 1484)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `Governance::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(73), added: 568, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Proposals` (r:1 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_emission_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `152`
		//  Estimated: `3593`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(38_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::RootCurator` (r:0 w:1)
	/// Proof: `Governance::RootCurator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_root_curator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Governance::RootCurator` (r:0 w:1)
	/// Proof: `Governance::RootCurator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn remove_root_curator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
