
//! Autogenerated weights for `pallet_torus0`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-06-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-de-Joao.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/torus-node
// benchmark
// pallet
// --pallet
// pallet_torus0
// --chain
// dev
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/torus0/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use polkadot_sdk::{
    frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}},
    *,
};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_torus0`.
pub trait WeightInfo {
	fn add_stake() -> Weight;
	fn remove_stake() -> Weight;
	fn transfer_stake() -> Weight;
	fn register_agent() -> Weight;
	fn unregister_agent() -> Weight;
	fn update_agent() -> Weight;
	fn set_agent_update_cooldown() -> Weight;
}

/// Weights for `pallet_torus0` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Torus0::MinAllowedStake` (r:1 w:0)
	/// Proof: `Torus0::MinAllowedStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Agents` (r:1 w:0)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakedBy` (r:1 w:1)
	/// Proof: `Torus0::StakedBy` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakingTo` (r:1 w:1)
	/// Proof: `Torus0::StakingTo` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::TotalStake` (r:1 w:1)
	/// Proof: `Torus0::TotalStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `268`
		//  Estimated: `4322`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(30_000_000, 4322)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Torus0::MinAllowedStake` (r:1 w:0)
	/// Proof: `Torus0::MinAllowedStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Agents` (r:1 w:0)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakingTo` (r:1 w:1)
	/// Proof: `Torus0::StakingTo` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakedBy` (r:1 w:1)
	/// Proof: `Torus0::StakedBy` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::TotalStake` (r:1 w:1)
	/// Proof: `Torus0::TotalStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `514`
		//  Estimated: `4322`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(35_000_000, 4322)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Torus0::MinAllowedStake` (r:1 w:0)
	/// Proof: `Torus0::MinAllowedStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Agents` (r:2 w:0)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakingTo` (r:2 w:2)
	/// Proof: `Torus0::StakingTo` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakedBy` (r:2 w:2)
	/// Proof: `Torus0::StakedBy` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::TotalStake` (r:1 w:1)
	/// Proof: `Torus0::TotalStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn transfer_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `554`
		//  Estimated: `7654`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(55_000_000, 7654)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Torus0::Agents` (r:1 w:1)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `Torus0::RegistrationsThisBlock` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `Torus0::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::BurnConfig` (r:1 w:0)
	/// Proof: `Torus0::BurnConfig` (`max_values`: Some(1), `max_size`: Some(52), added: 547, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Torus0::RegistrationsThisInterval` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MinNameLength` (r:1 w:0)
	/// Proof: `Torus0::MinNameLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MaxNameLength` (r:1 w:0)
	/// Proof: `Torus0::MaxNameLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MaxAgentUrlLength` (r:1 w:0)
	/// Proof: `Torus0::MaxAgentUrlLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Burn` (r:1 w:0)
	/// Proof: `Torus0::Burn` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Governance::DaoTreasuryAddress` (r:1 w:0)
	/// Proof: `Governance::DaoTreasuryAddress` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::FeeConstraints` (r:1 w:0)
	/// Proof: `Torus0::FeeConstraints` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Allocators` (r:1 w:0)
	/// Proof: `Governance::Allocators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn register_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `68`
		//  Estimated: `4322`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 4322)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Torus0::Agents` (r:1 w:1)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakingTo` (r:1 w:0)
	/// Proof: `Torus0::StakingTo` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn unregister_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `94`
		//  Estimated: `4322`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 4322)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Torus0::Agents` (r:1 w:1)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::AgentUpdateCooldown` (r:1 w:0)
	/// Proof: `Torus0::AgentUpdateCooldown` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MinNameLength` (r:1 w:0)
	/// Proof: `Torus0::MinNameLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MaxNameLength` (r:1 w:0)
	/// Proof: `Torus0::MaxNameLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MaxAgentUrlLength` (r:1 w:0)
	/// Proof: `Torus0::MaxAgentUrlLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::FeeConstraints` (r:1 w:0)
	/// Proof: `Torus0::FeeConstraints` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	fn update_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `155`
		//  Estimated: `4322`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 4322)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Torus0::AgentUpdateCooldown` (r:0 w:1)
	/// Proof: `Torus0::AgentUpdateCooldown` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn set_agent_update_cooldown() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Torus0::MinAllowedStake` (r:1 w:0)
	/// Proof: `Torus0::MinAllowedStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Agents` (r:1 w:0)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakedBy` (r:1 w:1)
	/// Proof: `Torus0::StakedBy` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakingTo` (r:1 w:1)
	/// Proof: `Torus0::StakingTo` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::TotalStake` (r:1 w:1)
	/// Proof: `Torus0::TotalStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `268`
		//  Estimated: `4322`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(30_000_000, 4322)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Torus0::MinAllowedStake` (r:1 w:0)
	/// Proof: `Torus0::MinAllowedStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Agents` (r:1 w:0)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakingTo` (r:1 w:1)
	/// Proof: `Torus0::StakingTo` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakedBy` (r:1 w:1)
	/// Proof: `Torus0::StakedBy` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::TotalStake` (r:1 w:1)
	/// Proof: `Torus0::TotalStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `514`
		//  Estimated: `4322`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(35_000_000, 4322)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Torus0::MinAllowedStake` (r:1 w:0)
	/// Proof: `Torus0::MinAllowedStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Agents` (r:2 w:0)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakingTo` (r:2 w:2)
	/// Proof: `Torus0::StakingTo` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakedBy` (r:2 w:2)
	/// Proof: `Torus0::StakedBy` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::TotalStake` (r:1 w:1)
	/// Proof: `Torus0::TotalStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn transfer_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `554`
		//  Estimated: `7654`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(55_000_000, 7654)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Torus0::Agents` (r:1 w:1)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `Torus0::RegistrationsThisBlock` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `Torus0::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::BurnConfig` (r:1 w:0)
	/// Proof: `Torus0::BurnConfig` (`max_values`: Some(1), `max_size`: Some(52), added: 547, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Torus0::RegistrationsThisInterval` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MinNameLength` (r:1 w:0)
	/// Proof: `Torus0::MinNameLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MaxNameLength` (r:1 w:0)
	/// Proof: `Torus0::MaxNameLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MaxAgentUrlLength` (r:1 w:0)
	/// Proof: `Torus0::MaxAgentUrlLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::Burn` (r:1 w:0)
	/// Proof: `Torus0::Burn` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Governance::DaoTreasuryAddress` (r:1 w:0)
	/// Proof: `Governance::DaoTreasuryAddress` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::FeeConstraints` (r:1 w:0)
	/// Proof: `Torus0::FeeConstraints` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Governance::Allocators` (r:1 w:0)
	/// Proof: `Governance::Allocators` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn register_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `68`
		//  Estimated: `4322`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 4322)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Torus0::Agents` (r:1 w:1)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::StakingTo` (r:1 w:0)
	/// Proof: `Torus0::StakingTo` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn unregister_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `94`
		//  Estimated: `4322`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 4322)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Torus0::Agents` (r:1 w:1)
	/// Proof: `Torus0::Agents` (`max_values`: None, `max_size`: Some(857), added: 3332, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::AgentUpdateCooldown` (r:1 w:0)
	/// Proof: `Torus0::AgentUpdateCooldown` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MinNameLength` (r:1 w:0)
	/// Proof: `Torus0::MinNameLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MaxNameLength` (r:1 w:0)
	/// Proof: `Torus0::MaxNameLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::MaxAgentUrlLength` (r:1 w:0)
	/// Proof: `Torus0::MaxAgentUrlLength` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Torus0::FeeConstraints` (r:1 w:0)
	/// Proof: `Torus0::FeeConstraints` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	fn update_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `155`
		//  Estimated: `4322`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 4322)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Torus0::AgentUpdateCooldown` (r:0 w:1)
	/// Proof: `Torus0::AgentUpdateCooldown` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn set_agent_update_cooldown() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
